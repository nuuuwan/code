import os
import re

from utils import File, Log

DIR_SRC = "src"
SUB_DIRS = [
    os.path.join("nonview", "base"),
    os.path.join("nonview", "core"),
    os.path.join("nonview", "constants"),
    os.path.join("view", "base"),
    os.path.join("view", "cumulative"),
    os.path.join("view", "features"),
]
log = Log("add indices")


def build_index(dir_path, class_name_list, is_singleton):
    lines = ["// Auto-generated by add_indices.py"]
    for class_name in class_name_list:
        lines.append(f'import {class_name} from "./{class_name}";')
    lines.append("")
    if is_singleton:
        class_name = class_name_list[0]
        lines.append(f"export default {class_name};")
    else:
        export_lines = []
        export_lines.append("export {")
        for class_name in class_name_list:
            export_lines.append(f"  {class_name},")
        export_lines.append("};")

        export_content = "\n".join(export_lines)
        if len(export_content) < 80:
            export_content = export_content.replace("\n", " ")

        lines.append(export_content)

    lines.append("")

    file_path = os.path.join(dir_path, "index.js")
    content = "\n".join(lines)
    content = re.sub(r"   ", " ", content)
    content = content.replace(", }", " }")
    File(file_path).write(content)
    # log.info(f'Wrote {len(class_name_list)} classes to {file_path}')


def get_class_name_list(dir_sub: str) -> list[str]:
    class_name_list = []
    for child_name in os.listdir(dir_sub):
        child_path = os.path.join(dir_sub, child_name)
        if os.path.isdir(child_path):
            class_name = child_name
            class_name_list.append(class_name)
            build_index(child_path, [class_name], True)
        else:
            if not child_name.endswith(".js"):
                continue
            if child_name == "index.js":
                continue
            class_name = child_name[:-3]
            class_name_list.append(class_name)
    class_name_list.sort()
    return class_name_list


def main():
    assert os.path.exists(DIR_SRC)
    for sub_dir in SUB_DIRS:
        dir_sub = os.path.join(DIR_SRC, sub_dir)
        if not os.path.exists(dir_sub):
            continue

        class_name_list = get_class_name_list(dir_sub)
        build_index(dir_sub, class_name_list, False)


if __name__ == "__main__":
    main()
